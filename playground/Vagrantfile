# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.ssh.insert_key = false

  cluster = {
    # "reg" =>  { :ip => "192.168.56.110", :mem => 512,  :cpu => 1 },
    "misc" => { :ip => "192.168.56.111", :mem => 512,  :cpu => 1 },
    "m1" =>  { :ip => "192.168.56.121", :mem => 512,  :cpu => 1 },
    # "m2" =>  { :ip => "192.168.56.122", :mem => 512,  :cpu => 1 },
    # "m3" =>  { :ip => "192.168.56.123", :mem => 512,  :cpu => 1 },
    # "s1" =>  { :ip => "192.168.56.131", :mem => 1024, :cpu => 2 },
    # "s2" =>  { :ip => "192.168.56.132", :mem => 512, :cpu => 1 },
    # "s3" =>  { :ip => "192.168.56.133", :mem => 1024, :cpu => 1 }
  }

  cluster.each_with_index do | (hostname, info), index |
    # config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.define hostname do | host |
      host.vm.box = "ubuntu/focal64"
      host.vm.provider "virtualbox" do |v|
        v.name   = "kubernetes-#{hostname}"
        v.memory = info[:mem]
        v.cpus   = info[:cpu]
      end
      host.vm.hostname = hostname
      host.vm.network "private_network", ip: info[:ip]
      host.vm.provision "shell", inline: <<-SHELL
        apt-get update
      SHELL
      # if index == cluster.size - 1
      #   config.vm.provision :ansible do |ansible|
      #     # Disable default limit to connect to all the machines
      #     ansible.limit = 'all'
      #     ansible.playbook = "provisioning/playbook.yml"
      #     ansible.inventory_path = "ansible_inventory"
      #   end
      # end
    end
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
